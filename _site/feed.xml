<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-04-01T01:35:17-05:00</updated><id>http://localhost:4000//</id><title type="html">Stefan Smagula Portfolio</title><subtitle>Powering people and products to reach their potential.
</subtitle><entry><title type="html">Hello world</title><link href="http://localhost:4000/2017/02/12/hello-world.html" rel="alternate" type="text/html" title="Hello world" /><published>2017-02-12T20:27:14-06:00</published><updated>2017-02-12T20:27:14-06:00</updated><id>http://localhost:4000/2017/02/12/hello-world</id><content type="html" xml:base="http://localhost:4000/2017/02/12/hello-world.html">&lt;p&gt;THIS STUB IS standing in for an article that I plan to write about my perspective on lean, agile, iterative product management and design, having seen these methods in practice at resource-rich technology innovation companies such as Google, and having seen how slightly smaller and leaner three-person startups do things. There are some interesting similarities, and several striking differences. I hope this will make for a useful article.&lt;/p&gt;

&lt;p&gt;Please hang in there while i crank the arm of this Web engine…it should start in a second or two.&lt;/p&gt;</content><author><name>Stefan Smagula</name></author><summary type="html">THIS STUB IS standing in for an article that I plan to write about my perspective on lean, agile, iterative product management and design, having seen these methods in practice at resource-rich technology innovation companies such as Google, and having seen how slightly smaller and leaner three-person startups do things. There are some interesting similarities, and several striking differences. I hope this will make for a useful article.</summary></entry><entry><title type="html">Notes on this new site</title><link href="http://localhost:4000/2017/02/01/welcome-to-new-site-jekyll.html" rel="alternate" type="text/html" title="Notes on this new site" /><published>2017-02-01T20:27:14-06:00</published><updated>2017-02-01T20:27:14-06:00</updated><id>http://localhost:4000/2017/02/01/welcome-to-new-site-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/02/01/welcome-to-new-site-jekyll.html">&lt;p&gt;YOU WILL FIND this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory, if you’re managing a Jekyll-backed site. Here’s how Jekyll works: you set up a Jekyll server locally and it watches your files for changes. With each change it will automatically re-generate the entire site, with the changes you just made incorporated. This takes about .22 seconds. What can you do with Jekyll? Well, anything that you can do with Ruby. If you look at the list of blog posts in  &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog&lt;/code&gt; , or the footer of the home page, there’s a bit of ruby code embedded in the HTML which is interpreted by Jekyll, and this code says: for each post in the posts list, show me the 3 most recent articles and then generate a 23 word excerpt and output the hed, dek, and excertp into these HTML tags.&lt;/p&gt;

&lt;p&gt;I found Jekyll’s includes and layouts easy to navigate. You put the code for your head, header, and footers in the includes directory, then include them into the layouts you create, for example a  &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt; layout. When you create a new instance of a &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt; , it uses the layout to determine which head, header, and footer go in there.&lt;/p&gt;

&lt;p&gt;When I first heard about static site generators, I was a bit confused. If you can do away with a database connection, latency, and fix security issues in one fell swoop, why don’t more bloggy sites use static site generators? Turns out the answer is: because we just needed a little time to figure out how simple it is. At least that’s how I feel.&lt;/p&gt;

&lt;p&gt;This site is hosted using &lt;a href=&quot;https://github.io/&quot;&gt;Github Pages&lt;/a&gt;, which makes hosting HTTPS sites relatively painless and easy, not to mention very cost-effective (gratis). The icons are by &lt;a href=&quot;http://FontAwesome.io/&quot;&gt;FontAwesome&lt;/a&gt; FontAwesome.io and the following icons from &lt;a href=&quot;https://thenounproject.com/&quot;&gt;Noun Project&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Recursive triangles, Created by Bohdan Burmich&lt;/li&gt;
  &lt;li&gt;Donut chart, created by HLD&lt;/li&gt;
  &lt;li&gt;Lightbulb, created by ImageCatalog 
The hero image on the home page is a photogram of what looks like pine needles. It is attributed to anonymous, and was created during the late 1800’s and is in the [Rijskmuseum collection][rijskmuseum] in Amsterdam.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can rebuild the site locally in many different ways, before you publish the site with a few keystrokes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not bad, right?&lt;/p&gt;

&lt;p&gt;There are many ways to generate the site, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates the site when any file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts to your blog, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Stefan Smagula</name></author><summary type="html">YOU WILL FIND this post in your _posts directory, if you’re managing a Jekyll-backed site. Here’s how Jekyll works: you set up a Jekyll server locally and it watches your files for changes. With each change it will automatically re-generate the entire site, with the changes you just made incorporated. This takes about .22 seconds. What can you do with Jekyll? Well, anything that you can do with Ruby. If you look at the list of blog posts in  /blog , or the footer of the home page, there’s a bit of ruby code embedded in the HTML which is interpreted by Jekyll, and this code says: for each post in the posts list, show me the 3 most recent articles and then generate a 23 word excerpt and output the hed, dek, and excertp into these HTML tags.</summary></entry></feed>
