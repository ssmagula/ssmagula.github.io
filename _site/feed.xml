<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-19T04:23:07+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Stefan Smagula Case Studies</title><subtitle>Powering people and products to reach their potential
</subtitle><entry><title type="html">T-minus three, two, one…wait, what’s going on?</title><link href="http://localhost:4000/2024/12/18/launch.html" rel="alternate" type="text/html" title="T-minus three, two, one…wait, what’s going on?" /><published>2024-12-18T15:27:14+00:00</published><updated>2024-12-18T15:27:14+00:00</updated><id>http://localhost:4000/2024/12/18/launch</id><content type="html" xml:base="http://localhost:4000/2024/12/18/launch.html"><![CDATA[<p>TO FULLY GRASP this story, you’ll need to have some idea of what the years 1999 to 2001 were like if you were working on Web sites. It was a boom time: weekly technology company IPOs, billion dollar investments in twenty-something entrepreneurs, and friends and family shares raining from the heavens. But it was also a time of creativity and reinvention. Back then I worked at a company that created Web sites for large corporations.</p>

<p>I was young and single, so traveling for work was an adventure, at least at first. One day, when we pitched an ecommerce site to a household name company, the front two rows were packed with salesmen who were unhappy about being disintermediated. About 3 minutes into the hour, shouting started, and two salesmen jumped up and got in the face of a guy from our company. They were red faced and screaming: “I have a family and a mortgage, how is your mother f*&amp;%$ Web site going to help me pay my mortgage?” Fists were going to fly. Then poof. The lights went out.</p>

<p>It became almost pitch black. The shouting stopped. Everyone tried to find a light switch. Then I realized: the switch is right behind me, I must have hit it accidentally. I turned it back on, and said something like “OK, the lights are back on. Let’s continue with the presentation.” We continued, and no more fights broke out. The presentation convinced the salesmen that the new site would relieve the sales guys of the painful record-keeping drudgery that they hated. They applauded. Deal signed. The lead for our team later pulled me aside and said: “Stefan, you have excellent instincts. Well done.” I nodded.</p>

<p>For my next gig, I landed at a five-star hotel in San Francisco. I was greeted in the elevator by a clutch of Japanese business men talking loudly. As soon as I entered, we stood silently for 20 floors, me in my 501 Levis and a t-shirt trying to think of something to say, them in their tailored 3-piece woolen suits wondering what this scruffy guy was doing there. The next morning I called the number I was given for a ride. A fancy limousine came to pick me up. What on earth was going on here?</p>

<h4 id="doubles">DOUBLES</h4>

<p>The browser company job was more traditional. I drove myself to work and sat a desk. As soon as we started designing/developing in earnest, we started to hire rapidly. I think the company doubled, then doubled again. Maybe 300 people were working there total at peak, maybe almost half on the browser. It was hard to know who was doing what, and when. Everyone and everything was new. There were no well worn paths. You had to make your own boots from discarded tire treads, and thread your a way through the undergrowth.</p>

<h4 id="front-end-development-is-hard">FRONT END DEVELOPMENT IS HARD</h4>

<p>The “you have twelve months to finish” comment was something I thought about quite often. The browser chrome was mostly done early on, but the various productivity apps were taking longer. Several of them finished, but I think the email client was taking a long time, and it was not clear if it would make it. The design called for a lot of rounded corners, which were not simple to implement at the time, and front end frameworks were in their infancy. It was like growing your own wheat and barley and then grinding it to make flour you could use to bake bread.</p>

<p>The front end team was huge by this time. They occupied this whole portion of the floor we were on, and they seemed to be having a good time, but maybe there was no choice. They worked a lot of hours, especially after the VP of product announced that the only way we’d finish in time was if we worked 24 hours a day. That’s right. 24 hours a day, 7 days a week. Shift A would develop, Shift B would test, then shift C would come in and work through the night and QA would take over in the morning. I think I was spared the night shifts, but did end up working on some weekends. It was not a fun time, but we were all hoping that this browser could be finished in time. What would happen if we didn’t finish in time? It was not clear. Maybe the partner would pull out? Maybe we’d all lose our jobs.</p>

<p>The front end developers, being last in a very long, big batch, big bang, waterfall process, ended up with all the pressure on their shoulders. It was up to them to make everything happen in time.</p>

<h4 id="the-ambulance">THE AMBULANCE</h4>
<p>One day, in the thick of this absolutely all-consuming pressure to perform, I heard: “Rolando’s on the floor.” I knew the guy by name. He was a front end developer. I walked over, and saw a group of people kneeling around him. Couldn’t see him. I heard someone say “I called 911. EMS is on the way.”</p>

<p>I went back to my desk. Had I contributed to the pressure? Had I pushed for more, faster, better? Were we all partly responsible for creating the tank that rolled over him, and us?</p>

<h4 id="next-installment">NEXT INSTALLMENT</h4>
<p>I’ll share what happens when the clouds parted, and the true nature of our project was revealed.</p>

<p>NB: Names and details have been changed.</p>]]></content><author><name>Stefan Smagula</name></author><summary type="html"><![CDATA[TO FULLY GRASP this story, you’ll need to have some idea of what the years 1999 to 2001 were like if you were working on Web sites. It was a boom time: weekly technology company IPOs, billion dollar investments in twenty-something entrepreneurs, and friends and family shares raining from the heavens. But it was also a time of creativity and reinvention. Back then I worked at a company that created Web sites for large corporations.]]></summary></entry><entry><title type="html">He said “All you have to do now is just write the code”</title><link href="http://localhost:4000/2024/12/08/a_new_browser.html" rel="alternate" type="text/html" title="He said “All you have to do now is just write the code”" /><published>2024-12-08T15:27:14+00:00</published><updated>2024-12-08T15:27:14+00:00</updated><id>http://localhost:4000/2024/12/08/a_new_browser</id><content type="html" xml:base="http://localhost:4000/2024/12/08/a_new_browser.html"><![CDATA[<p>MORTON GREETED ME with a conspiratorial smile, which was odd because we had just met. He was the C-level executive of a company, and I was just some dude who had recently left grad school who was looking for work. He asked a question that required imagination: “If I give you a Web page that 20 million people look at once a day, every day, what would you do with that page?” I said something totally crazy that I instantly regretted, but it was too late. The recruiter called later that day: you’re hired.</p>

<p>I met with Morton once a week to talk about the work ahead of us. It involved creating a suite of productivity apps for consumers, a starting page that would greet you each day—the one Morton asked about in the interview—and the chrome or user interface, that wraps around the browser’s rendering engine. Then I saw an email that went to the whole company; Morton was no longer with the company. This is probably not a good sign, I remember thinking. Later that day I ran into him as he was waiting for the elevator to exit the building. I said hi. He gave me that conspiratorial smile again and said, “Stefan, I’ve gotta to go now, but I know you all will figure it out.” As the elevator door was closing he said: “You’ve got this.” I appreciated that word of confidence from Morton. I never saw him again.</p>

<h4 id="like-a-tank">LIKE A TANK</h4>

<p>About 15 of us who were going to create this new browser gathered in a windowless, Class A office space. Many more folding chairs than people. The fluorescent lights flickered as the head of product management (though that term was not in use commonly back then) showed us charts and stats. We learned about users, usage, and revenue. Then came an ominous slide: the main source of revenue was disappearing (isn’t it always?). We barely had time to consider the ramifications because the next slide showed us a new way to make money, and it involved a new partnership with a larger, more prosperous company. The partner had already signed a letter of intent, so “we are good” he said.</p>

<h4 id="12-months-to-finish">12 MONTHS TO FINISH</h4>

<p>After walking through all the various apps, and capabilities of the new browser, the VP of product held up a hefty tome bound with a fat binder clip and said: “The requirements are all right here. All you have to do now is just write the code. You have 12 months to finish.”</p>

<p>He asked if there were questions. Some of the software engineers were a little skeptical that the applications described could be designed/developed in 12 months. “Who did you work with to create the estimate of 12 months?” asked a junior developer. I remember the head of product’s response: “We’re like a tank rolling towards victory. If you get in the way of victory, or if any of you get in the way, the tank will roll right over you.” This phrase came back to haunt me about a year later.</p>

<h4 id="productivity-suite">PRODUCTIVITY SUITE</h4>
<p>I started to read the product requirements document. It said we will create a browser with an integrated Web-based productivity suite: an email client, a calendar, a stock portfolio, a starting page, a searchbox that generated leads for a search partner, etc. It continued for about 200 pages.</p>

<p>I can’t remember who it was, but someone said “Hey, check out this browser: it’s got a tabbed UI” and sent me a link. I installed it. This MIT grad student’s browser allowed you to create tabs. Each was a new Web page. We all instantly realized this was a huge productivity and performance improvement, and we started talking about doing the same thing.</p>

<p>The lead software engineer and I stood at a whiteboard. He drew a diagram of the browser’s architecture, boxes nested in boxes, and then we talked about this tabbed UI. He asked me questions like: “What if you open 100 tabs?” and “What happens when I close the last tab?” and similar. I remember sketching a set of tabs on the whiteboard, and then we came up with some good guesses for behaviors. Not too long later he pulled up a browser with tabs. We played with it, and tweaked a few behaviors. It worked.</p>

<p>The head of the user research team was not happy with the tabs. She argued that our subscribers were “everyday people, not techies. They just want to to check their email, maybe search for something. That’s it.” She said “Why do we want to complicate their lives with tons of extra tabs and applications they don’t want or need?” This planted a seed of doubt. Would “everyday people” be confused by tabs? I heard people say “tabs are too risky.”</p>

<p>Right about then we hired a design agency. It was a company founded by a guy who had designed several of Apple’s classic, early products. The group of us talked about the pros and cons of tabs in a browser, and a decision was made: we already had a functional prototype, the technoligical risk was low. We’d gather feedback from prospective users and adjust if needed. Tabs were in.</p>

<h4 id="next-installment">NEXT INSTALLMENT</h4>
<p>I’ll share a stroy about what happened about a year later, when an ambulance pulled up to our building.</p>

<p>NB: Names and details have been changed.</p>]]></content><author><name>Stefan Smagula</name></author><summary type="html"><![CDATA[MORTON GREETED ME with a conspiratorial smile, which was odd because we had just met. He was the C-level executive of a company, and I was just some dude who had recently left grad school who was looking for work. He asked a question that required imagination: “If I give you a Web page that 20 million people look at once a day, every day, what would you do with that page?” I said something totally crazy that I instantly regretted, but it was too late. The recruiter called later that day: you’re hired.]]></summary></entry><entry><title type="html">What I learned from the first browser I worked on</title><link href="http://localhost:4000/2024/11/30/my_first_browser.html" rel="alternate" type="text/html" title="What I learned from the first browser I worked on" /><published>2024-11-30T15:27:14+00:00</published><updated>2024-11-30T15:27:14+00:00</updated><id>http://localhost:4000/2024/11/30/my_first_browser</id><content type="html" xml:base="http://localhost:4000/2024/11/30/my_first_browser.html"><![CDATA[<p>RIGHT BEFORE THE DOT COM boom blossomed into peak irrational exuberance I wrote my master’s degree thesis called “The Almost Chosen Ones” about technogical anxiety and American religions. With an MA in hand, I left my job working at a  technology R&amp;D center and started working at a software product company in Austin, Texas. We didn’t know it at the time, but the bubble was about to burst, and the forecast was for storms.</p>

<p>This particular company had 12 million subscribers paying $15 to $20 a month for a service (I’m going to keep things intentionally vague). To use the service, you would launch a customized Web browser. Here’s the kicker, the part that’s critical to the whole thing: despite being very successful, despite annually recurring revenue in the billions, the service was not at all better or even different than what was offered by 100 similar companies at the time. It was a plain old service, just like all the others.</p>

<p>Why was it was more successful? Somewhere along the way, some clever people in business development had figured out that under the right conditions, Microsoft would be willing to pre-install this browser and place an alias to it on their desktop. When people bought a new Windows computer, a percentage of them would see that colorful icon on the desktop and launch that pre-installed browser. After a bit of marketing, they’d feel inspired to type their credit card number into a form field.</p>

<h4 id="its-easy">IT’S EASY</h4>

<p>I was friends with the business development lead who negotiated the terms of the agreement with Microsoft. She would fly in from Seattle every few months to meet with people at the headquarters in Austin. During one of her visits I invited her and her boss over for dinner at my house. I grilled some fajitas, warmed the corn tortillas from El Milagro Tortilleria, and made some pico de gallo with peppers from my garden. We talked about work. I said something like “So, how on earth do you two convince Microsoft to put our icon on every single Windows desktop?”</p>

<p>“It’s easy. We give Microsoft a s<em>&amp;</em>t ton of money,” my friend said.</p>

<p>I asked: “So Microsoft doesn’t own a rival service that they’d rather promote on every single desktop they sell in North America?”</p>

<p>“Not yet! But maybe we could sell the company to them.” She replied.</p>

<h4 id="lessons">LESSONS</h4>
<p>That night I learned an important lesson: even if your browser is not the system default if you get a browser icon in front of lots of people at the right time and place, your custom browser can succeed. It’s not that offering a differentiated or distinctive product and service doesn’t help, but without distribution even a demonstrably superior product will struggle.</p>

<h4 id="irrational-man-and-woman">IRRATIONAL MAN AND WOMAN</h4>
<p>Traditional economists model humans as beings who are constantly making decisions based on “rationality,” meaning they carefully weigh all available information and options to make choices that maximize their personal benefit or utility. Cool, calm, and self-interested. But we must only look in the mirror to know that we are emotional and irrational. We buy lottery tickets, despite knowing that it is unlikely we will profit. We continue to punch the clock at difficult workplaces long after we have accrued more than enough money to do whatever we want. We spend $1,700 on 3 ounces of “anti-aging” facial cream which consists of 90 cents worth of humectants and emollients. We do not make perfectly rational decisions.</p>

<h4 id="status-quo-bias">STATUS QUO BIAS</h4>
<p>If you read Thaler and Sunstein and other behavioral economists, you know that there are quite a few human biases that perturb the orbit of the human decision-making process. Status quo bias is one of them. It refers to the tendency to accept a default, even if something better is available, costs nothing, and switching would take just a second. Another way to think about this is that convenience tends to trump quality or price.</p>

<p>When people buy a computer they tend to accept the defaults because they think “the manufacturer must have configured it this way because it is the best option for my computer.” If people see custom browser icon on the desktop and they’re aware that this browser offers a needed service, they think: “Maybe I could research a cheaper or better option for this service, but I trust the service will work on my computer. Plus, it’s convenient” and boom, you have billions in annually recurring revenue.</p>

<h4 id="next-installment">NEXT INSTALLMENT</h4>
<p>In my next few posts I’ll write about the ummm…adventure we had when the Chief Product Officer was abruptly fired, and then a decision was made that we would re-think and re-invent the customized browser that was preinstalled on every Microsoft desktop in North America. We were asked to upgrade it technologically in order to offer a new and pricier service that would be better at motivating new users to stick around. This new, better browser and service would increase the lifetime value of each user, but something got in the way. Spoiler alert: it was a tabbed browser with a full productivity suite, and it predated Firefox, the “first tabbed browser.”</p>]]></content><author><name>Stefan Smagula</name></author><summary type="html"><![CDATA[RIGHT BEFORE THE DOT COM boom blossomed into peak irrational exuberance I wrote my master’s degree thesis called “The Almost Chosen Ones” about technogical anxiety and American religions. With an MA in hand, I left my job working at a technology R&amp;D center and started working at a software product company in Austin, Texas. We didn’t know it at the time, but the bubble was about to burst, and the forecast was for storms.]]></summary></entry><entry><title type="html">Are you product manager or designer?</title><link href="http://localhost:4000/2017/10/13/product_or_ux.html" rel="alternate" type="text/html" title="Are you product manager or designer?" /><published>2017-10-13T13:27:14+00:00</published><updated>2017-10-13T13:27:14+00:00</updated><id>http://localhost:4000/2017/10/13/product_or_ux</id><content type="html" xml:base="http://localhost:4000/2017/10/13/product_or_ux.html"><![CDATA[<p>PEOPLE ASK are you a product designer, a UX person, a researcher, a prototyper, or a product manager?</p>

<p>Here’s how I answer.</p>

<p>For many years I’ve been designing the context in which decisions get made, but I only came to this conclusion a few years ago after I read a book called <cite>Nudge</cite> by Richard Thaler. It was about behavioral economics. A week ago Thaler won the Nobel Prize for Economic Sciences. Prior to reading <cite>Nudge</cite> I had read books and papers about Human-Computer Interaction principles and psychology and was briefly a member of the Association for Computing Machines (ACM) Special Interest Group for Computer-Human Interaction (SIG-CHI). The ACM mainly made me jealous of those who attended SIG-CHI conferences in far-off places. HCI and psychology offered a fascinating set of theories such as Hick’s Law and Fitts’s Law that guide low-level product design decisions. How many options should go on a tool bar? How large should this particular button be?</p>

<p>But product design and product management thinking lacked a Grand Unified Theory that would tie all the various little ideas together to form one overarching, highly predictive, testable theory of what we do when we work at developing new products.</p>

<p>The terrain that Thaler outlines in <cite>Nudge</cite> is clearly a Grand Unified Theory that incorporates research from diverse fields including economics, HCI, and psychology to help predict and explain human decision making, in all its irrational glory. Understanding the irrational basis of human decision making is a key first step towards improving decision making, improving outcomes, and developing new products.</p>

<p>So, to get back to that question: what am I? I have planned and conducted discovery-oriented field studies using both qualitative techniques (participant-observer) and quantitative techniques such as random moment sampling and surveys. I’ve validated and <em> invalidated</em> product ideas through research and usability testing with users and customers, but I don’t consider myself to be a user experience researcher.</p>

<p>I can write a well-formed user story, know when and why to use acceptance criteria and ‘how to demo’ criteria, and I can prioritize epics and stories by business value, user value, and properly estimated complexity. I can lead scrum and agile teams as a servant-leader and I can define product and user experience metrics. I know why and when to use entry cohort analysis, and can point to examples of how I used entry cohort analysis in the past with good effect. But I don’t consider myself to be only a product manager.</p>

<p>I can design wireframes and  high-fidelity mockups of software using AI or Sketch, and can prototype interactions, transitions, and animations (HTML/CSS, Origami, or InVision). I’m a competent visual designer who is familiar with design, art, art history, principles of typography. I know the difference between Russian constructivism and neo-brutalism and can talk about the role of technology in shaping both how we design and what we design (a Worfian hypothesis). But I’m not a visual design specialist.</p>

<p>I’m researcher, product manager, designer, prototyper, and curious person who likes to learn and solve problems.</p>

<p>But I get asked a lot “are you a designer or product person?” This question confuses me, because to me a designer is a product person, and vice-versa. You cannot design a software product effectively without having discovered, validated, and prioritized product ideas with real or proxy users. You cannot properly devise and prioritize a product backlog, without a grasp of people—their goals, needs, and preferences for visual and emotional design.</p>

<p>Product thinking includes tasks like validating the problem and the solution, prioritizing by value and complexity, planning iteratively, measuring, evaluating, systematizing, designing for change (often called ‘agility’). Design thinking requires an understanding of human factors and ergonomics, human psychology, behavioral economics, and the principles of visual communication and emotional design. It’s the combination of product thinking with design thinking that yields a holistic view of what a product or service can and should become.</p>]]></content><author><name>Stefan Smagula</name></author><summary type="html"><![CDATA[PEOPLE ASK are you a product designer, a UX person, a researcher, a prototyper, or a product manager?]]></summary></entry><entry><title type="html">What Joseph Beuys can teach product managers and designers</title><link href="http://localhost:4000/2017/10/13/beuys_teaches_product.html" rel="alternate" type="text/html" title="What Joseph Beuys can teach product managers and designers" /><published>2017-10-13T13:27:14+00:00</published><updated>2017-10-13T13:27:14+00:00</updated><id>http://localhost:4000/2017/10/13/beuys_teaches_product</id><content type="html" xml:base="http://localhost:4000/2017/10/13/beuys_teaches_product.html"><![CDATA[<p>IN AN <a href="/2017/10/13/product_or_ux.html">EARLIER</a> post, I wrote about the connections between research, product management, user experience design, product design, and prototyping. This post expands on the same theme: the potential that comes from working across disciplines, not within them.</p>

<p>What does Joseph Beuys have to do with all this? When I was in high school in San Francisco, where I grew up, I discovered a German artist named Joseph Beuys. His dictum was “Everyone’s an artist.” At the time I was in love with chemistry, neurology, and science but I could see that ever-increasing specialization would be required if I became a chemist or a neurologist. This seemed odd to me. Wouldn’t I be more capable (not to mention happier) if I were a specialist in a few areas? When I was sixteen years old the answer that I received from my neurologist mentor was basically: you cannot be a specialist in a few areas. You must choose, and choose soon.</p>

<p>Then I read an auto-biographical essay by Joseph Beuys, in it he described being a biological sciences student at a prestigious German university. He was a good student but an uncertainty was nagging him. He felt possibly unsuited to become a professional biologist. This resonated with my sixteen-year old self. Beuys described one particular afternoon when he experienced his epiphany. He was in a lecture hall listening to a professor who had spent his entire life studying the inner organelles of a tiny one-celled organism. Beuys stood up and walked out of the lecture hall, never to return to science. Instead he turned to art.</p>

<p>He became one of the most influential artists of the Post-WWII era, helping to found the Fluxus movement which inspired many artists to think more conceptually about their art, and what could be accomplished with it. Joseph Beuys saw transforming society as his mission, but it was not his art that would transform society, it was everyman who would do that:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Joseph Beuys believed that it was possible to transform society 
through the creativity of every individual. He emerged as an 
artist amid Germany's post-war reconstruction, claiming for 
art a unique role in the spiritual regeneration of society, 
in opposition to a materialistic culture. 
</code></pre></div></div>

<p><a href="http://www.tate.org.uk/whats-on/tate-liverpool/exhibition/joseph-beuys-revolution-us">Tate Museum Catalog</a></p>

<p>Most product managers, researchers, designers, and software engineers who toil long hours at technology startups and corporations would say that they are motivated to work because, deep down, they are striving ‘make the world a better place’—through software. And software is changing the world, sometimes for the better. Look at the advances we’ve made in the last 20 years: peer-to-peer technologies, artificial intelligence, machine learning, computer vision, mobile computing, augmented reality, new markets, technology-based crypto-currencies… I could go on and on. But by becoming increasingly specialized, narrowly focused on ‘just engineering’ or ‘just designing’ we risk losing the sort of holistic, overarching, transformative vision that can only come from all of us collaborating together.</p>

<p>If you want to make the world a better place, the creativity of every individual is needed. This is what Beuys teaches us.</p>]]></content><author><name>Stefan Smagula</name></author><summary type="html"><![CDATA[IN AN EARLIER post, I wrote about the connections between research, product management, user experience design, product design, and prototyping. This post expands on the same theme: the potential that comes from working across disciplines, not within them.]]></summary></entry><entry><title type="html">Making this site</title><link href="http://localhost:4000/2017/04/02/welcome-to-new-site-jekyll.html" rel="alternate" type="text/html" title="Making this site" /><published>2017-04-02T15:27:14+00:00</published><updated>2017-04-02T15:27:14+00:00</updated><id>http://localhost:4000/2017/04/02/welcome-to-new-site-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/04/02/welcome-to-new-site-jekyll.html"><![CDATA[<p>YOU WILL FIND this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory, if you’re managing a Jekyll site. Jekyll is a static site generator, written in Ruby. Here’s how it works: you install Jekyll locally:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">~</span> <span class="err">$</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">jekyll</span> <span class="n">bundler</span></code></pre></figure>

<p>and you generate the scaffolding for a new site with a brief incantation like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">~</span> <span class="err">$</span> <span class="n">jekyll</span> <span class="n">new</span> <span class="n">my</span><span class="o">-</span><span class="n">new</span><span class="o">-</span><span class="n">site</span><span class="o">-</span><span class="nb">name</span></code></pre></figure>

<p>Then you simply move to the site directory you just created</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">~</span> <span class="err">$</span> <span class="n">cd</span> <span class="n">my</span><span class="o">-</span><span class="n">new</span><span class="o">-</span><span class="n">site</span><span class="o">-</span><span class="nb">name</span></code></pre></figure>

<p>and then from inside that directory, you run the Jekyll server</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">~</span><span class="sr">/my-new-site-name $ bundle exec jekyll serve --watch</span></code></pre></figure>

<p>Now that the server is ‘watching’ your site for changes, as you add code and content, Jekyll automatically re-generates the entire site. In my case, with just a few pages, the process takes .22 seconds. Then you push the site to a git repository like <a href="https://github.com/">Github</a>, and publish it via Github Pages.</p>

<h4 id="why-jekyll">WHY JEKYLL?</h4>
<p>What can you do with Jekyll? Well, pretty much anything that you can do with Ruby. If you’re like me, and eager to learn more Ruby, then Jekyll is a great way to ease into things. Take a look at the list of blog posts in  <code class="language-plaintext highlighter-rouge">/blog</code> (or the footer of the home page), under the hood there’s a bit of embedded Ruby in the HTML and this Ruby says: make a list of all the blog articles, discard all but the most recent three posts, then create a 23-word excerpt for each, and output the hed, dek, small image, and excerpt into these HTML tags here. The hed, dek, etc. are all defined in the front matter of the markdown file you use to create the post. ‘Front matter’ sound confusing? Just open the sample posts that are baked into the default new site. It’ll make instant sense. They’re just variables that you can refer to elsewhere.</p>

<p>I found Jekyll’s includes and layouts easy to navigate. You put reusable code for the head, header, and footers in the includes directory, then include them into layouts you create, for example a  <code class="language-plaintext highlighter-rouge">page</code> layout. When you create a new instance of a <code class="language-plaintext highlighter-rouge">page</code>, it knows that a  <code class="language-plaintext highlighter-rouge">page</code> is just a slight variation on the <code class="language-plaintext highlighter-rouge">default</code> layout.</p>

<p>Because there’s no database in the backend, there’s reduced complexity, increased security, and each page is much snappier to load.</p>

<p>When I first heard about static site generators, I was a bit confused. If this were possible, why aren’t more bloggy sites using static site generators? Turns out the answer is: because we just needed a little time to figure out how simple it is. At least that’s how I feel.</p>

<h4 id="credits">CREDITS</h4>
<p>This site is hosted using <a href="https://github.io/">Github Pages</a>, which makes hosting HTTPS sites relatively painless and easy, not to mention very cost-effective (gratis). I used the Bootstrap Agency theme for its animated fixed nav bar and nice timeline CSS. All icons are by <a href="http://FontAwesome.io/">FontAwesome</a>, and from time to time I use the following icons from the <a href="https://thenounproject.com/">Noun Project</a></p>
<ul>
  <li>Recursive triangles, Created by Bohdan Burmich</li>
  <li>Donut chart, created by HLD</li>
  <li>Lightbulb, created by ImageCatalog</li>
</ul>

<p>The full-bleed image at the top of the site is a photogram of pine needles. I chose this image because it reveals the rhythm, inner structure of something simple, something we take for granted. It is “Dennenaalden, anonymous, 1840 - 1845” and is part of the <a href="https://www.rijksmuseum.nl/en/my/collections/183512--stefan-smagula/patterns/objecten#/RP-F-F15045,0">Rijskmuseum collection</a> in Amsterdam.</p>

<h4 id="rebuilding-and-publishing">REBUILDING AND PUBLISHING</h4>
<p>You can rebuild the site locally in many different ways, but using the –watch flag is simple. When you’re ready, you publish the entire site with a new incantation:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="n">origin</span> <span class="n">master</span></code></pre></figure>

<p>Simple, right?</p>

<p>To add new posts to your blog, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter.</p>

<p>Jekyll also offers support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Stefan Smagula</name></author><summary type="html"><![CDATA[YOU WILL FIND this post in your _posts directory, if you’re managing a Jekyll site. Jekyll is a static site generator, written in Ruby. Here’s how it works: you install Jekyll locally: ~ $ gem install jekyll bundler]]></summary></entry><entry><title type="html">Hello world</title><link href="http://localhost:4000/2017/04/01/hello-world.html" rel="alternate" type="text/html" title="Hello world" /><published>2017-04-01T15:27:14+00:00</published><updated>2017-04-01T15:27:14+00:00</updated><id>http://localhost:4000/2017/04/01/hello-world</id><content type="html" xml:base="http://localhost:4000/2017/04/01/hello-world.html"><![CDATA[<p>THIS STUB IS standing in for an article that I plan to write about my perspective on agile, iterative product management and design, having seen these methods in practice at resource-rich technology companies such as Google, and having seen how slightly smaller and slightly less resource-rich startups do things. Large and small companies have a lot to learn from each other, and I hope this theme will make for a useful series of articles.</p>

<p>Please hang in there while i crank the arm of this Web engine. It should start up in a second or two…</p>]]></content><author><name>Stefan Smagula</name></author><summary type="html"><![CDATA[THIS STUB IS standing in for an article that I plan to write about my perspective on agile, iterative product management and design, having seen these methods in practice at resource-rich technology companies such as Google, and having seen how slightly smaller and slightly less resource-rich startups do things. Large and small companies have a lot to learn from each other, and I hope this theme will make for a useful series of articles.]]></summary></entry></feed>